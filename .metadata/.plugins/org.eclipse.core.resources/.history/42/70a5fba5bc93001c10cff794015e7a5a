package com.example.demo.Config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.example.demo.Validate.LoginValidator;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	
	@Autowired
	LoginValidator loginValidator;
	

    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/css/**", "/js/**", "/img/**", "/lib/**");
        //인증 대상에서 제외 기본적인 이미지나 css파일들은 누구에게나 적용돼야하기 때문.
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.authorizeRequests()
                .antMatchers("/member/**").authenticated()
                .antMatchers("/admin/**").authenticated()
                //인증된 회원에게만
                .antMatchers("/**").permitAll();
        		//모든 회원에게
                
        http.formLogin()
                .loginPage("/signin")
                .loginProcessingUrl("/signinProcess") //폼에서 id/pw를 넘겨줄 url		
                .defaultSuccessUrl("/")	
                .permitAll()
                .usernameParameter("username")
        		.passwordParameter("pw");

        http.logout()
                .logoutRequestMatcher(new AntPathRequestMatcher("/signout"))
                .logoutSuccessUrl("/signin")
                .invalidateHttpSession(true);

        http.exceptionHandling()
                .accessDeniedPage("/");
        //권한없는 사용자가 강제로 접속 시도 시
    }

    @Override
    public void configure(AuthenticationManagerBuilder auth) throws Exception {
    	//계정을 입력받으면 loginvalidator로 넘어갈 수 있게 해줌
        auth.userDetailsService(loginValidator);
    }

    @Bean
    public BCryptPasswordEncoder getPasswordEncoder()
    {
      return new BCryptPasswordEncoder();
    }

    
}